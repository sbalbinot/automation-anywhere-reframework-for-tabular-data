<Task>
<TaskProperties>
		<Description />
		<Created>11/22/2019 19:02:21</Created>
		<RunDuration />
		<TotalCommands>99</TotalCommands>
		<TotalClicks>0</TotalClicks>
		<TotalMouseClicks>0</TotalMouseClicks>
		<TotalKeystrokes>0</TotalKeystrokes>
		<RepeatType>Do Not Repeat</RepeatType>
		<ReplaySpeedType>0</ReplaySpeedType>
		<LastModified>03/09/2020 15:09:16</LastModified>
		<PlayModeType>Standard</PlayModeType>
		<IsRunWithSimilerWindows>False</IsRunWithSimilerWindows>
		<IsNotifyEMail>False</IsNotifyEMail>
		<Email />
		<PriorityType>Low</PriorityType>
		<IsBlockKeystroke>False</IsBlockKeystroke>
		<IsStealthMode>False</IsStealthMode>
		<IsCapsLockOn>False</IsCapsLockOn>
		<IsNumLockOn>True</IsNumLockOn>
		<TaskTimeout>0</TaskTimeout>
		<IsContentAnalyticsEnabled>False</IsContentAnalyticsEnabled>
	</TaskProperties>
<Variables>
<Variable>
		<Name>$pub_project$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pub_transaction_data$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pub_transaction_id$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pvt_input_file_sheet_name$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pvt_input_file_path$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pvt_input_file_extension$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pvt_input_file_encoding$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pvt_column_names$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pvt_column_count$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pvt_aux_count$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pvt_aux$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pub_process$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pub_log_file$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pub_system_error$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pvt_task_name$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pvt_td_rows_count$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pub_config_file$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pub_transaction_data_file$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
<Variable>
		<Name>$pvt_column_names_list$</Name>
		<Type>List</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance">&lt;Items&gt;
	&lt;Item&gt;0&lt;/Item&gt;
	&lt;/Items&gt;</Value>
		<MakeRandom>False</MakeRandom>
	</Variable>
<Variable>
		<Name>$pvt_column_name$</Name>
		<Type>Value</Type>
		<Value xmlns:q1="http://www.w3.org/2001/XMLSchema" p3:type="q1:string" xmlns:p3="http://www.w3.org/2001/XMLSchema-instance"></Value>
	</Variable>
</Variables>
<Commands>
	<Command Disabled="True" EventData="Comment:  Define AATaskName">
		<Name>Comment</Name>
		<CommandText> Define AATaskName</CommandText>
	</Command>
	<Command EventData="String Operation: Find &quot;(\w+).atmx&quot; within &quot;$AATaskName$&quot; and assign output to $pvt_task_name$">
		<Name>Find</Name>
	</Command>
	<Command EventData="String Operation: Extract substring from &quot;$AATaskName$&quot; and assign output to $pvt_task_name$">
		<Name>Substr</Name>
	</Command>
	<Command Disabled="True" EventData="Comment:  Define Transaction Data file">
		<Name>Comment</Name>
		<CommandText> Define Transaction Data file</CommandText>
	</Command>
	<Command EventData="String Operation: Before-After &quot;$AAApplicationPath$\Automation Anywhere\My Docs\$pub_project$\$pub_process$\TransactionData.xml&quot; and assign output to $pub_transaction_data_file$">
		<Name>BeforeAfter</Name>
	</Command>
	<Command EventData="Begin Error Handling; Action: Stop Task; Options: Log to File, Variable Assignment,  Task Status: Fail">
		<Name>ErrorHandling</Name>
		<ErrorHandlingOptions>
			<Action>Stop Task</Action>
			<LogDataToFile>
				<FilePath>$pub_log_file$</FilePath>
				<Text>$Year$-$Month$-$Day$ $Hour$:$Minute$:$Second$;$Machine$;$pub_process$;;$pvt_task_name$;ERROR;$Error Description$;$Error Line Number$</Text>
				<AddTimeStamp>false</AddTimeStamp>
				<Append>true</Append>
			</LogDataToFile>
			<VariableAssignment>
				<Variable>$pub_system_error$</Variable>
				<ValueToAssign>Exception</ValueToAssign>
			</VariableAssignment>
			<SetTaskStatus>Pass</SetTaskStatus>
		</ErrorHandlingOptions>
	<Commands>
<Command Disabled="True" EventData="Comment:  Get Config Attribute Value: InputFilePath">
		<Name>Comment</Name>
		<CommandText> Get Config Attribute Value: InputFilePath</CommandText>
	</Command><Command EventData="Run Logic &quot;ReFramework\GetXMLAttributeValue&quot; from MetaBot &quot;My MetaBots\IPROCESS\Library.mbot&quot;">
		<Name>Logic</Name>
		<MetaBot>\IPROCESS\Library.mbot</MetaBot>
		<Logic>GetXMLAttributeValue</Logic>
		<MetaBotId>91c132f1-fe89-4b96-9176-1a02aad66402</MetaBotId>
		<LogicId>c4a22ca2-e3dd-44cf-8afc-07d8811a22e9</LogicId>
		<InputParameters>
			<Parameter>
				<Name>$node$</Name>
				<Value>/Data/Settings/InputFilePath</Value>
				<Type>Value</Type>
			</Parameter>
			<Parameter>
				<Name>$xml$</Name>
				<Value>$pub_config_file$</Value>
				<Type>Value</Type>
			</Parameter>
		</InputParameters>
		<OutputParameters>
			<Parameter>
				<Name>$value$</Name>
				<Value>$pvt_input_file_path$</Value>
				<Type>Value</Type>
			</Parameter>
		</OutputParameters>
	</Command><Command Disabled="True" EventData="Comment:  Get File Extension: InputFilePath">
		<Name>Comment</Name>
		<CommandText> Get File Extension: InputFilePath</CommandText>
	</Command><Command EventData="Run Logic &quot;ReFramework\GetFileExtension&quot; from MetaBot &quot;My MetaBots\IPROCESS\Library.mbot&quot;">
		<Name>Logic</Name>
		<MetaBot>\IPROCESS\Library.mbot</MetaBot>
		<Logic>GetFileExtension</Logic>
		<MetaBotId>91c132f1-fe89-4b96-9176-1a02aad66402</MetaBotId>
		<LogicId>c66a4b7e-b141-4623-8419-6305d8e5e33d</LogicId>
		<InputParameters>
			<Parameter>
				<Name>$file$</Name>
				<Value>$pvt_input_file_path$</Value>
				<Type>Value</Type>
			</Parameter>
		</InputParameters>
		<OutputParameters>
			<Parameter>
				<Name>$file_extension$</Name>
				<Value>$pvt_input_file_extension$</Value>
				<Type>Value</Type>
			</Parameter>
		</OutputParameters>
	</Command><Command EventData="XML : Start XML Session using text &lt;...&gt; Session:Default">
		<Name>StartXMLSession</Name>
	</Command><Command EventData="If $pvt_input_file_extension$ Equal To (=) &quot;CSV&quot; Then  ">
		<Name>If</Name>
		<Condition Type="Variable">
			<VariableName>$pvt_input_file_extension$</VariableName>
			<Operator>EqualTo</Operator>
			<VariableValueType>Fix</VariableValueType>
			<FixValue>CSV</FixValue>
			<VariableValue />
		</Condition>
	<Commands>
<Command Disabled="True" EventData="Comment:  Read Tabular File: CSV">
		<Name>Comment</Name>
		<CommandText> Read Tabular File: CSV</CommandText>
	</Command><Command Disabled="True" EventData="Comment:  Get Config Attribute Value: InputFileEncoding">
		<Name>Comment</Name>
		<CommandText> Get Config Attribute Value: InputFileEncoding</CommandText>
	</Command><Command EventData="Run Logic &quot;ReFramework\GetXMLAttributeValue&quot; from MetaBot &quot;My MetaBots\IPROCESS\Library.mbot&quot;">
		<Name>Logic</Name>
		<MetaBot>\IPROCESS\Library.mbot</MetaBot>
		<Logic>GetXMLAttributeValue</Logic>
		<MetaBotId>91c132f1-fe89-4b96-9176-1a02aad66402</MetaBotId>
		<LogicId>c4a22ca2-e3dd-44cf-8afc-07d8811a22e9</LogicId>
		<InputParameters>
			<Parameter>
				<Name>$node$</Name>
				<Value>/Data/Settings/InputFileEncoding</Value>
				<Type>Value</Type>
			</Parameter>
			<Parameter>
				<Name>$xml$</Name>
				<Value>$pub_config_file$</Value>
				<Type>Value</Type>
			</Parameter>
		</InputParameters>
		<OutputParameters>
			<Parameter>
				<Name>$value$</Name>
				<Value>$pvt_input_file_encoding$</Value>
				<Type>Value</Type>
			</Parameter>
		</OutputParameters>
	</Command><Command EventData="If $pvt_input_file_encoding$ Equal To (=) &quot;UTF-8&quot; Then  ">
		<Name>If</Name>
		<Condition Type="Variable">
			<VariableName>$pvt_input_file_encoding$</VariableName>
			<Operator>EqualTo</Operator>
			<VariableValueType>Fix</VariableValueType>
			<FixValue>UTF-8</FixValue>
			<VariableValue />
		</Condition>
	<Commands>
<Command EventData="Read From CSV file: &quot;$AAApplicationPath$\Automation Anywhere\My Docs\$pub_project$\$pub_process$\$pvt_input_file_path$&quot; Delimiter: &quot;Regional List Separator&quot; Header: &quot;No&quot; Trim Leading Space: &quot;Yes&quot; Trim Trailing Space: &quot;Yes&quot; Session: 'Default'">
		<Name>ReadFrom</Name>
	</Command>
</Commands>
</Command><Command EventData="Else If $pvt_input_file_encoding$ Equal To (=) &quot;ANSI&quot; Then  ">
		<Name>ElseIf</Name>
		<Condition Type="Variable">
			<VariableName>$pvt_input_file_encoding$</VariableName>
			<Operator>EqualTo</Operator>
			<VariableValueType>Fix</VariableValueType>
			<FixValue>ANSI</FixValue>
			<VariableValue />
		</Condition>
	<Commands>
<Command EventData="Read From CSV file: &quot;$AAApplicationPath$\Automation Anywhere\My Docs\$pub_project$\$pub_process$\$pvt_input_file_path$&quot; Delimiter: &quot;Regional List Separator&quot; Header: &quot;No&quot; Trim Leading Space: &quot;Yes&quot; Trim Trailing Space: &quot;Yes&quot; Session: 'Default'">
		<Name>ReadFrom</Name>
	</Command>
</Commands>
</Command><Command EventData="Else If $pvt_input_file_encoding$ Equal To (=) &quot;UNICODE&quot; Then  ">
		<Name>ElseIf</Name>
		<Condition Type="Variable">
			<VariableName>$pvt_input_file_encoding$</VariableName>
			<Operator>EqualTo</Operator>
			<VariableValueType>Fix</VariableValueType>
			<FixValue>UNICODE</FixValue>
			<VariableValue />
		</Condition>
	<Commands>
<Command EventData="Read From CSV file: &quot;$AAApplicationPath$\Automation Anywhere\My Docs\$pub_project$\$pub_process$\$pvt_input_file_path$&quot; Delimiter: &quot;Regional List Separator&quot; Header: &quot;No&quot; Trim Leading Space: &quot;Yes&quot; Trim Trailing Space: &quot;Yes&quot; Session: 'Default'">
		<Name>ReadFrom</Name>
	</Command>
</Commands>
</Command><Command EventData="Variable Operation: 0 To $pub_transaction_id$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pub_transaction_id$</Variable>
		<VariableValue>0</VariableValue>
	</Command><Command EventData="Start Loop &quot;Each row in a CSV/Text file of Session: Default&quot;">
		<Name>Loop</Name>
		<Loop For="EachRowInCSVTextFile" SessionName="Default" />
	<Commands>
<Command EventData="Variable Operation: 0 To $pvt_aux_count$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pvt_aux_count$</Variable>
		<VariableValue>0</VariableValue>
	</Command><Command EventData="If $Counter$ Equal To (=) &quot;1&quot; Then  ">
		<Name>If</Name>
		<Condition Type="Variable">
			<VariableName>$Counter$</VariableName>
			<Operator>EqualTo</Operator>
			<VariableValueType>Fix</VariableValueType>
			<FixValue>1</FixValue>
			<VariableValue />
		</Condition>
	<Commands>
<Command EventData="Loop While $pvt_aux$ Not Equal To (&lt;&gt;) &quot;TRUE&quot; ; Check condition at the end">
		<Name>Loop</Name>
		<Loop For="Variable" ExitConditionLoop="True">
			<Condition Type="Variable">
				<VariableName>$pvt_aux$</VariableName>
				<Operator>NotEqualTo</Operator>
				<VariableValueType>Fix</VariableValueType>
				<FixValue>TRUE</FixValue>
				<VariableValue />
			</Condition>
		</Loop>
	<Commands>
<Command EventData="Variable Operation: $pvt_aux_count$ + 1 To $pvt_aux_count$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pvt_aux_count$</Variable>
		<VariableValue>$pvt_aux_count$ + 1</VariableValue>
	</Command><Command EventData="If $pvt_aux_count$ Equal To (=) &quot;1&quot; Then  ">
		<Name>If</Name>
		<Condition Type="Variable">
			<VariableName>$pvt_aux_count$</VariableName>
			<Operator>EqualTo</Operator>
			<VariableValueType>Fix</VariableValueType>
			<FixValue>1</FixValue>
			<VariableValue />
		</Condition>
	<Commands>
<Command EventData="Variable Operation: $Filedata Column($pvt_aux_count$)$ To $pvt_column_names$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pvt_column_names$</Variable>
		<VariableValue>$Filedata Column($pvt_aux_count$)$</VariableValue>
	</Command>
</Commands>
</Command><Command EventData="Else">
		<Name>Else</Name>
	<Commands>
<Command EventData="Begin Error Handling; Action: Continue; Options: Variable Assignment,  Task Status: Pass">
		<Name>ErrorHandling</Name>
		<ErrorHandlingOptions>
			<Action>Continue</Action>
			<VariableAssignment>
				<Variable>$pvt_aux$</Variable>
				<ValueToAssign>TRUE</ValueToAssign>
			</VariableAssignment>
			<SetTaskStatus>Fail</SetTaskStatus>
		</ErrorHandlingOptions>
	<Commands>
<Command EventData="Variable Operation: $pvt_column_names$;$Filedata Column($pvt_aux_count$)$ To $pvt_column_names$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pvt_column_names$</Variable>
		<VariableValue>$pvt_column_names$;$Filedata Column($pvt_aux_count$)$</VariableValue>
	</Command>
</Commands>
</Command>
</Commands>
</Command>
</Commands>
</Command><Command EventData="String Operation: Trim &quot;$pvt_column_names$&quot; and assign output to $pvt_column_names$">
		<Name>Trim</Name>
	</Command><Command EventData="String Operation: Split &quot;$pvt_column_names$&quot; with delimiter &quot;;&quot; and assign output to $pvt_column_names_list$">
		<Name>Split</Name>
	</Command>
</Commands>
</Command><Command EventData="Else">
		<Name>Else</Name>
	<Commands>
<Command EventData="Variable Operation: $pub_transaction_id$ + 1 To $pub_transaction_id$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pub_transaction_id$</Variable>
		<VariableValue>$pub_transaction_id$ + 1</VariableValue>
	</Command><Command EventData="XML : Insert Node with name &quot;Row&quot; and value &quot;&quot; at XPath location &quot;/Data&quot;. Session:Default">
		<Name>InsertNode</Name>
	</Command><Command EventData="Start Loop &quot;List Variable $pvt_column_names_list$&quot; ">
		<Name>Loop</Name>
		<Loop For="List" List="$pvt_column_names_list$" />
	<Commands>
<Command EventData="Variable Operation: $pvt_aux_count$ + 1 To $pvt_aux_count$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pvt_aux_count$</Variable>
		<VariableValue>$pvt_aux_count$ + 1</VariableValue>
	</Command><Command EventData="Variable Operation: $pvt_column_names_list$ To $pvt_column_name$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pvt_column_name$</Variable>
		<VariableValue>$pvt_column_names_list$</VariableValue>
	</Command><Command Disabled="True" EventData="Comment: Troca os espaços por _ nos nomes das colunas do arquivo de input (XML não aceita nome de node com espaço)">
		<Name>Comment</Name>
		<CommandText>Troca os espaços por _ nos nomes das colunas do arquivo de input (XML não aceita nome de node com espaço)</CommandText>
	</Command><Command EventData="String Operation: Replace &quot; &quot; with &quot;_&quot; in &quot;$pvt_column_name$&quot; and assign output to $pvt_column_name$ ">
		<Name>Replace</Name>
	</Command><Command EventData="XML : Insert Node with name &quot;$pvt_column_name$&quot; and value &quot;$Filedata Column($pvt_aux_count$)$&quot; at XPath location &quot;/Data/Row[@ID=$pub_transaction_id$]&quot;. Session:Default">
		<Name>InsertNode</Name>
	</Command>
</Commands>
</Command>
</Commands>
</Command>
</Commands>
</Command>
</Commands>
</Command><Command EventData="Else">
		<Name>Else</Name>
	<Commands>
<Command Disabled="True" EventData="Comment:  Read Tabular File: Excel">
		<Name>Comment</Name>
		<CommandText> Read Tabular File: Excel</CommandText>
	</Command><Command EventData="Excel: Open Spreadsheet &quot;$AAApplicationPath$\Automation Anywhere\My Docs\$pub_project$\$pub_process$\$pvt_input_file_path$&quot;. ActiveSheet: &quot;Default&quot;. Session: Default">
		<Name>Open</Name>
	</Command><Command Disabled="True" EventData="Comment:  Get Config Attribute Value List: InputFileSheetName">
		<Name>Comment</Name>
		<CommandText> Get Config Attribute Value List: InputFileSheetName</CommandText>
	</Command><Command EventData="Run Logic &quot;ReFramework\GetXMLAttributeValue&quot; from MetaBot &quot;My MetaBots\IPROCESS\Library.mbot&quot;">
		<Name>Logic</Name>
		<MetaBot>\IPROCESS\Library.mbot</MetaBot>
		<Logic>GetXMLAttributeValue</Logic>
		<MetaBotId>91c132f1-fe89-4b96-9176-1a02aad66402</MetaBotId>
		<LogicId>c4a22ca2-e3dd-44cf-8afc-07d8811a22e9</LogicId>
		<InputParameters>
			<Parameter>
				<Name>$node$</Name>
				<Value>/Data/Settings/InputFileSheetName</Value>
				<Type>Value</Type>
			</Parameter>
			<Parameter>
				<Name>$xml$</Name>
				<Value>$pub_config_file$</Value>
				<Type>Value</Type>
			</Parameter>
		</InputParameters>
		<OutputParameters>
			<Parameter>
				<Name>$value$</Name>
				<Value>$pvt_input_file_sheet_name$</Value>
				<Type>Value</Type>
			</Parameter>
		</OutputParameters>
	</Command><Command EventData="Variable Operation: 0 To $pub_transaction_id$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pub_transaction_id$</Variable>
		<VariableValue>0</VariableValue>
	</Command><Command EventData="Excel: Activate Sheet by name = $pvt_input_file_sheet_name$. Session: Default">
		<Name>ActivateSheet</Name>
	</Command><Command EventData="Excel: Go to cell &quot;A1&quot;. Session: Default">
		<Name>GotoCell</Name>
	</Command><Command EventData="Excel: Go to end of the row of the active cell. Session: Default">
		<Name>GotoCell</Name>
	</Command><Command EventData="Variable Operation: $Excel Cell Column$ To $pvt_column_count$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pvt_column_count$</Variable>
		<VariableValue>$Excel Cell Column$</VariableValue>
	</Command><Command EventData="Excel: Go to one cell right of active cell. Session: Default">
		<Name>GotoCell</Name>
	</Command><Command EventData="Excel: Go to one cell below the active cell. Session: Default">
		<Name>GotoCell</Name>
	</Command><Command EventData="Excel: Set value of Active Cell with &quot;=COLUMN($pvt_column_count$1)&quot;. Session: Default">
		<Name>SetCell</Name>
	</Command><Command EventData="Excel: Get value of Active Cell and assign to variable &quot;$pvt_column_count$&quot; Session: Default">
		<Name>GetCells</Name>
	</Command><Command EventData="Excel: Delete Active Cell with option entire column. Session: Default">
		<Name>DeleteCells</Name>
	</Command><Command EventData="Excel: Get All Cells Session: Default">
		<Name>GetCells</Name>
	</Command><Command EventData="Start Loop &quot;Each row in an Excel dataset of Session: Default&quot;">
		<Name>Loop</Name>
		<Loop For="ExcelDataSetRow" SessionName="Default" />
	<Commands>
<Command EventData="Variable Operation: 0 To $pvt_aux_count$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pvt_aux_count$</Variable>
		<VariableValue>0</VariableValue>
	</Command><Command EventData="If $Counter$ Equal To (=) &quot;1&quot; Then  ">
		<Name>If</Name>
		<Condition Type="Variable">
			<VariableName>$Counter$</VariableName>
			<Operator>EqualTo</Operator>
			<VariableValueType>Fix</VariableValueType>
			<FixValue>1</FixValue>
			<VariableValue />
		</Condition>
	<Commands>
<Command EventData="Loop While $pvt_aux_count$ Less Than(&lt;) $pvt_column_count$ ; Check condition at the end">
		<Name>Loop</Name>
		<Loop For="Variable" ExitConditionLoop="True">
			<Condition Type="Variable">
				<VariableName>$pvt_aux_count$</VariableName>
				<Operator>Less Than</Operator>
				<VariableValueType>Variable</VariableValueType>
				<FixValue />
				<VariableValue>$pvt_column_count$</VariableValue>
			</Condition>
		</Loop>
	<Commands>
<Command EventData="Variable Operation: $pvt_aux_count$ + 1 To $pvt_aux_count$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pvt_aux_count$</Variable>
		<VariableValue>$pvt_aux_count$ + 1</VariableValue>
	</Command><Command EventData="If $pvt_aux_count$ Equal To (=) &quot;1&quot; Then  ">
		<Name>If</Name>
		<Condition Type="Variable">
			<VariableName>$pvt_aux_count$</VariableName>
			<Operator>EqualTo</Operator>
			<VariableValueType>Fix</VariableValueType>
			<FixValue>1</FixValue>
			<VariableValue />
		</Condition>
	<Commands>
<Command EventData="Variable Operation: $Excel Column($pvt_aux_count$)$ To $pvt_column_names$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pvt_column_names$</Variable>
		<VariableValue>$Excel Column($pvt_aux_count$)$</VariableValue>
	</Command>
</Commands>
</Command><Command EventData="Else">
		<Name>Else</Name>
	<Commands>
<Command EventData="Variable Operation: $pvt_column_names$;$Excel Column($pvt_aux_count$)$ To $pvt_column_names$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pvt_column_names$</Variable>
		<VariableValue>$pvt_column_names$;$Excel Column($pvt_aux_count$)$</VariableValue>
	</Command>
</Commands>
</Command>
</Commands>
</Command><Command EventData="String Operation: Trim &quot;$pvt_column_names$&quot; and assign output to $pvt_column_names$">
		<Name>Trim</Name>
	</Command><Command EventData="String Operation: Split &quot;$pvt_column_names$&quot; with delimiter &quot;;&quot; and assign output to $pvt_column_names_list$">
		<Name>Split</Name>
	</Command>
</Commands>
</Command><Command EventData="Else">
		<Name>Else</Name>
	<Commands>
<Command EventData="Variable Operation: $pub_transaction_id$ + 1 To $pub_transaction_id$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pub_transaction_id$</Variable>
		<VariableValue>$pub_transaction_id$ + 1</VariableValue>
	</Command><Command EventData="XML : Insert Node with name &quot;Row&quot; and value &quot;&quot; at XPath location &quot;/Data&quot;. Session:Default">
		<Name>InsertNode</Name>
	</Command><Command EventData="Start Loop &quot;List Variable $pvt_column_names_list$&quot; ">
		<Name>Loop</Name>
		<Loop For="List" List="$pvt_column_names_list$" />
	<Commands>
<Command EventData="Variable Operation: $pvt_aux_count$ + 1 To $pvt_aux_count$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pvt_aux_count$</Variable>
		<VariableValue>$pvt_aux_count$ + 1</VariableValue>
	</Command><Command EventData="Variable Operation: $pvt_column_names_list$ To $pvt_column_name$">
		<Name>VariableOperation</Name>
		<OperationType>Variable operation</OperationType>
		<VariableType>User Variables</VariableType>
		<Variable>$pvt_column_name$</Variable>
		<VariableValue>$pvt_column_names_list$</VariableValue>
	</Command><Command Disabled="True" EventData="Comment: Troca os espaços por _ nos nomes das colunas do arquivo de input (XML não aceita nome de node com espaço)">
		<Name>Comment</Name>
		<CommandText>Troca os espaços por _ nos nomes das colunas do arquivo de input (XML não aceita nome de node com espaço)</CommandText>
	</Command><Command EventData="String Operation: Replace &quot; &quot; with &quot;_&quot; in &quot;$pvt_column_name$&quot; and assign output to $pvt_column_name$ ">
		<Name>Replace</Name>
	</Command><Command EventData="XML : Insert Node with name &quot;$pvt_column_name$&quot; and value &quot;$Excel Column($pvt_aux_count$)$&quot; at XPath location &quot;/Data/Row[@ID=$pub_transaction_id$]&quot;. Session:Default">
		<Name>InsertNode</Name>
	</Command>
</Commands>
</Command>
</Commands>
</Command>
</Commands>
</Command><Command EventData="Excel: Close Spreadsheet. Session: Default">
		<Name>Close</Name>
	</Command>
</Commands>
</Command><Command EventData="XML : Execute XPath Function 'count(//Row)' and assign to variable '$pvt_td_rows_count$'. Session:'Default'">
		<Name>ExeXPath</Name>
	</Command><Command Disabled="True" EventData="Comment:  Write data to Transaction Data file">
		<Name>Comment</Name>
		<CommandText> Write data to Transaction Data file</CommandText>
	</Command><Command EventData="XML : Save Session Data assigned to variable &quot;$pub_transaction_data$&quot;; Write Session Data into a new file &quot;$pub_transaction_data_file$&quot; with overwrite file if exists. Session:Default">
		<Name>SaveXML</Name>
	</Command><Command EventData="XML : End XML Session. Session:Default">
		<Name>EndSession</Name>
	</Command><Command EventData="Log to File: $Year$-$Month$-$Day$ $Hour$:$Minute$:$Second$;$Machine$;$pub_process$;;$pvt_task_name$;INFO;Número total de transações: $pvt_td_rows_count$; in &quot;$pub_log_file$&quot;">
		<Name>LogToFile</Name>
	</Command>
</Commands>
</Command>
</Commands>
</Task>
